{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { medicalCollaborationAPI } from \"../../services/api\";\nexport var fetchMedicalStaff = createAsyncThunk('medicalCollaboration/fetchMedicalStaff', function () {\n  var _ref3 = _asyncToGenerator(function* (_ref, _ref2) {\n    var patientId = _ref.patientId,\n      token = _ref.token;\n    var rejectWithValue = _ref2.rejectWithValue;\n    try {\n      var response = yield medicalCollaborationAPI.getMedicalStaff(patientId, token);\n      return response;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return rejectWithValue(((_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.error) || '医療従事者情報の取得に失敗しました');\n    }\n  });\n  return function (_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nexport var sendReport = createAsyncThunk('medicalCollaboration/sendReport', function () {\n  var _ref6 = _asyncToGenerator(function* (_ref4, _ref5) {\n    var reportData = _ref4.reportData,\n      token = _ref4.token;\n    var rejectWithValue = _ref5.rejectWithValue;\n    try {\n      var response = yield medicalCollaborationAPI.sendReport(reportData, token);\n      return response;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return rejectWithValue(((_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.error) || 'レポート送信に失敗しました');\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nexport var fetchMessages = createAsyncThunk('medicalCollaboration/fetchMessages', function () {\n  var _ref9 = _asyncToGenerator(function* (_ref7, _ref8) {\n    var patientId = _ref7.patientId,\n      limit = _ref7.limit,\n      token = _ref7.token;\n    var rejectWithValue = _ref8.rejectWithValue;\n    try {\n      var response = yield medicalCollaborationAPI.getMessages(patientId, limit, token);\n      return response;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return rejectWithValue(((_error$response3 = error.response) == null ? void 0 : (_error$response3$data = _error$response3.data) == null ? void 0 : _error$response3$data.error) || 'メッセージ履歴の取得に失敗しました');\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref9.apply(this, arguments);\n  };\n}());\nexport var sendMessage = createAsyncThunk('medicalCollaboration/sendMessage', function () {\n  var _ref10 = _asyncToGenerator(function* (_ref0, _ref1) {\n    var messageData = _ref0.messageData,\n      token = _ref0.token;\n    var rejectWithValue = _ref1.rejectWithValue;\n    try {\n      var response = yield medicalCollaborationAPI.sendMessage(messageData, token);\n      return response;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return rejectWithValue(((_error$response4 = error.response) == null ? void 0 : (_error$response4$data = _error$response4.data) == null ? void 0 : _error$response4$data.error) || 'メッセージ送信に失敗しました');\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref10.apply(this, arguments);\n  };\n}());\nexport var fetchAppointments = createAsyncThunk('medicalCollaboration/fetchAppointments', function () {\n  var _ref13 = _asyncToGenerator(function* (_ref11, _ref12) {\n    var patientId = _ref11.patientId,\n      token = _ref11.token;\n    var rejectWithValue = _ref12.rejectWithValue;\n    try {\n      var response = yield medicalCollaborationAPI.getAppointments(patientId, token);\n      return response;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return rejectWithValue(((_error$response5 = error.response) == null ? void 0 : (_error$response5$data = _error$response5.data) == null ? void 0 : _error$response5$data.error) || '予約情報の取得に失敗しました');\n    }\n  });\n  return function (_x9, _x0) {\n    return _ref13.apply(this, arguments);\n  };\n}());\nvar initialState = {\n  medicalStaff: {\n    primaryDoctor: null,\n    physiotherapist: null,\n    nurses: [],\n    specialists: []\n  },\n  messages: [],\n  unreadCount: 0,\n  activeConversation: null,\n  sharedReports: [],\n  pendingReports: [],\n  reportTemplates: [],\n  appointments: [],\n  nextAppointment: null,\n  notifications: [],\n  alerts: [],\n  sharingPreferences: {\n    autoShareProgress: true,\n    autoShareACLRSI: true,\n    autoShareAIAnalysis: false,\n    weeklyReportEnabled: true,\n    emergencyContactEnabled: true\n  },\n  notificationSettings: {\n    newMessage: true,\n    appointmentReminder: true,\n    reportRequested: true,\n    urgentAlert: true,\n    weeklyDigest: false\n  },\n  isLoading: false,\n  error: null,\n  lastUpdated: null,\n  activeTab: 'team'\n};\nvar medicalCollaborationSlice = createSlice({\n  name: 'medicalCollaboration',\n  initialState: initialState,\n  reducers: {\n    addMessage: function addMessage(state, action) {\n      var message = _objectSpread({\n        id: Date.now().toString(),\n        timestamp: new Date().toISOString(),\n        isRead: true,\n        isSent: true\n      }, action.payload);\n      state.messages.unshift(message);\n      if (state.messages.length > 100) {\n        state.messages = state.messages.slice(0, 100);\n      }\n    },\n    markMessageAsRead: function markMessageAsRead(state, action) {\n      var messageId = action.payload;\n      var message = state.messages.find(function (m) {\n        return m.id === messageId;\n      });\n      if (message && !message.isRead) {\n        message.isRead = true;\n        state.unreadCount = Math.max(0, state.unreadCount - 1);\n      }\n    },\n    markAllMessagesAsRead: function markAllMessagesAsRead(state) {\n      state.messages.forEach(function (message) {\n        message.isRead = true;\n      });\n      state.unreadCount = 0;\n    },\n    setActiveConversation: function setActiveConversation(state, action) {\n      state.activeConversation = action.payload;\n    },\n    addPendingReport: function addPendingReport(state, action) {\n      var report = _objectSpread({\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString(),\n        status: 'pending'\n      }, action.payload);\n      state.pendingReports.unshift(report);\n    },\n    updateReportStatus: function updateReportStatus(state, action) {\n      var _action$payload = action.payload,\n        reportId = _action$payload.reportId,\n        status = _action$payload.status;\n      var pendingIndex = state.pendingReports.findIndex(function (r) {\n        return r.id === reportId;\n      });\n      if (pendingIndex !== -1) {\n        if (status === 'sent') {\n          var report = state.pendingReports[pendingIndex];\n          report.status = 'sent';\n          report.sentAt = new Date().toISOString();\n          state.sharedReports.unshift(report);\n          state.pendingReports.splice(pendingIndex, 1);\n        } else {\n          state.pendingReports[pendingIndex].status = status;\n        }\n      }\n    },\n    addNotification: function addNotification(state, action) {\n      var notification = _objectSpread({\n        id: Date.now().toString(),\n        timestamp: new Date().toISOString(),\n        isRead: false\n      }, action.payload);\n      state.notifications.unshift(notification);\n      if (notification.type === 'message') {\n        state.unreadCount += 1;\n      }\n      if (state.notifications.length > 50) {\n        state.notifications = state.notifications.slice(0, 50);\n      }\n    },\n    markNotificationAsRead: function markNotificationAsRead(state, action) {\n      var notificationId = action.payload;\n      var notification = state.notifications.find(function (n) {\n        return n.id === notificationId;\n      });\n      if (notification && !notification.isRead) {\n        notification.isRead = true;\n      }\n    },\n    addAlert: function addAlert(state, action) {\n      var alert = _objectSpread({\n        id: Date.now().toString(),\n        timestamp: new Date().toISOString(),\n        isActive: true\n      }, action.payload);\n      state.alerts.unshift(alert);\n      if (state.alerts.length > 10) {\n        state.alerts = state.alerts.slice(0, 10);\n      }\n    },\n    dismissAlert: function dismissAlert(state, action) {\n      var alertId = action.payload;\n      var alert = state.alerts.find(function (a) {\n        return a.id === alertId;\n      });\n      if (alert) {\n        alert.isActive = false;\n        alert.dismissedAt = new Date().toISOString();\n      }\n    },\n    updateSharingPreferences: function updateSharingPreferences(state, action) {\n      state.sharingPreferences = _objectSpread(_objectSpread({}, state.sharingPreferences), action.payload);\n    },\n    updateNotificationSettings: function updateNotificationSettings(state, action) {\n      state.notificationSettings = _objectSpread(_objectSpread({}, state.notificationSettings), action.payload);\n    },\n    setActiveTab: function setActiveTab(state, action) {\n      state.activeTab = action.payload;\n    },\n    clearError: function clearError(state) {\n      state.error = null;\n    },\n    setDummyData: function setDummyData(state) {\n      var now = new Date();\n      state.medicalStaff = {\n        primaryDoctor: {\n          id: 'doc_001',\n          name: '田中 一郎',\n          title: '整形外科医',\n          specialization: 'スポーツ整形外科',\n          hospital: '東京スポーツ医療センター',\n          email: 'tanaka@sports-med.jp',\n          phone: '03-1234-5678',\n          avatar: null,\n          isOnline: true,\n          lastSeen: new Date().toISOString()\n        },\n        physiotherapist: {\n          id: 'pt_001',\n          name: '佐藤 花子',\n          title: '理学療法士',\n          specialization: 'スポーツリハビリテーション',\n          hospital: '東京スポーツ医療センター',\n          email: 'sato@sports-med.jp',\n          phone: '03-1234-5679',\n          avatar: null,\n          isOnline: false,\n          lastSeen: new Date(now.getTime() - 30 * 60 * 1000).toISOString()\n        },\n        nurses: [{\n          id: 'nurse_001',\n          name: '山田 次郎',\n          title: '看護師',\n          specialization: 'リハビリテーション看護',\n          hospital: '東京スポーツ医療センター',\n          email: 'yamada@sports-med.jp',\n          avatar: null,\n          isOnline: true\n        }],\n        specialists: [{\n          id: 'spec_001',\n          name: '鈴木 三郎',\n          title: 'スポーツ心理学者',\n          specialization: '復帰支援カウンセリング',\n          hospital: '東京スポーツ医療センター',\n          email: 'suzuki@sports-med.jp',\n          avatar: null,\n          isOnline: false\n        }]\n      };\n      state.messages = [{\n        id: '1',\n        senderId: 'pt_001',\n        senderName: '佐藤 花子',\n        senderTitle: '理学療法士',\n        content: 'お疲れ様です。今日のトレーニングはいかがでしたか？痛みの状況について教えてください。',\n        timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),\n        type: 'text',\n        isRead: false,\n        isSent: false\n      }, {\n        id: '2',\n        senderId: 'patient',\n        senderName: '患者',\n        content: 'お疲れ様です。今日は調子が良く、痛みも2/10程度でした。ミニスクワットも10回×3セット完了できました。',\n        timestamp: new Date(now.getTime() - 90 * 60 * 1000).toISOString(),\n        type: 'text',\n        isRead: true,\n        isSent: true\n      }, {\n        id: '3',\n        senderId: 'doc_001',\n        senderName: '田中 一郎',\n        senderTitle: '整形外科医',\n        content: '経過良好ですね。来週の診察で次のフェーズについて相談しましょう。ACL-RSIの結果も拝見しました。',\n        timestamp: new Date(now.getTime() - 24 * 60 * 60 * 1000).toISOString(),\n        type: 'text',\n        isRead: true,\n        isSent: false\n      }];\n      state.unreadCount = 1;\n      state.sharedReports = [{\n        id: 'report_001',\n        title: '週間進捗レポート',\n        type: 'weekly_progress',\n        createdAt: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n        sentAt: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000 + 60000).toISOString(),\n        status: 'sent',\n        recipients: ['doc_001', 'pt_001'],\n        data: {\n          sessionsCompleted: 5,\n          totalExercises: 42,\n          averagePainLevel: 2.1,\n          averageBorgScale: 11.8,\n          noteableProgress: 'ROM改善、筋力向上確認'\n        }\n      }, {\n        id: 'report_002',\n        title: 'ACL-RSI評価結果',\n        type: 'acl_rsi',\n        createdAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n        sentAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000 + 120000).toISOString(),\n        status: 'sent',\n        recipients: ['doc_001', 'spec_001'],\n        data: {\n          totalScore: 72,\n          emotionScore: 68,\n          confidenceScore: 75,\n          interpretation: '準備度が中程度',\n          recommendations: ['競技特異的トレーニング', '復帰計画の策定']\n        }\n      }];\n      state.appointments = [{\n        id: 'apt_001',\n        title: '経過観察・診察',\n        doctor: state.medicalStaff.primaryDoctor,\n        datetime: new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n        duration: 30,\n        location: '東京スポーツ医療センター 3F 診察室A',\n        type: 'consultation',\n        status: 'confirmed',\n        notes: '次フェーズへの移行について相談'\n      }, {\n        id: 'apt_002',\n        title: 'リハビリテーション',\n        doctor: state.medicalStaff.physiotherapist,\n        datetime: new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n        duration: 60,\n        location: '東京スポーツ医療センター 2F リハビリ室',\n        type: 'physiotherapy',\n        status: 'confirmed',\n        notes: '機能評価とプログラム調整'\n      }];\n      state.nextAppointment = state.appointments[0];\n      state.notifications = [{\n        id: 'notif_001',\n        type: 'message',\n        title: '理学療法士からメッセージ',\n        content: '今日のトレーニングについて質問があります',\n        timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),\n        isRead: false,\n        sender: state.medicalStaff.physiotherapist\n      }, {\n        id: 'notif_002',\n        type: 'appointment_reminder',\n        title: '診察予約のリマインダー',\n        content: '3日後の診察予約があります',\n        timestamp: new Date(now.getTime() - 6 * 60 * 60 * 1000).toISOString(),\n        isRead: true,\n        appointment: state.appointments[0]\n      }, {\n        id: 'notif_003',\n        type: 'report_shared',\n        title: 'レポートが共有されました',\n        content: 'ACL-RSI評価結果が医療従事者と共有されました',\n        timestamp: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n        isRead: true,\n        report: state.sharedReports[1]\n      }];\n      state.lastUpdated = new Date().toISOString();\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchMedicalStaff.pending, function (state) {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchMedicalStaff.fulfilled, function (state, action) {\n      state.isLoading = false;\n      state.medicalStaff = action.payload.medicalStaff;\n      state.lastUpdated = new Date().toISOString();\n    }).addCase(fetchMedicalStaff.rejected, function (state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    }).addCase(sendReport.pending, function (state) {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(sendReport.fulfilled, function (state, action) {\n      state.isLoading = false;\n      var reportId = action.payload.reportId;\n      var pendingIndex = state.pendingReports.findIndex(function (r) {\n        return r.id === reportId;\n      });\n      if (pendingIndex !== -1) {\n        var report = state.pendingReports[pendingIndex];\n        report.status = 'sent';\n        report.sentAt = new Date().toISOString();\n        state.sharedReports.unshift(report);\n        state.pendingReports.splice(pendingIndex, 1);\n      }\n    }).addCase(sendReport.rejected, function (state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    }).addCase(fetchMessages.pending, function (state) {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchMessages.fulfilled, function (state, action) {\n      state.isLoading = false;\n      state.messages = action.payload.messages;\n      state.unreadCount = action.payload.unreadCount;\n      state.lastUpdated = new Date().toISOString();\n    }).addCase(fetchMessages.rejected, function (state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    }).addCase(sendMessage.pending, function (state) {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(sendMessage.fulfilled, function (state, action) {\n      state.isLoading = false;\n      var message = _objectSpread(_objectSpread({}, action.payload.message), {}, {\n        isSent: true,\n        isRead: true\n      });\n      state.messages.unshift(message);\n    }).addCase(sendMessage.rejected, function (state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    }).addCase(fetchAppointments.pending, function (state) {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchAppointments.fulfilled, function (state, action) {\n      state.isLoading = false;\n      state.appointments = action.payload.appointments;\n      state.nextAppointment = action.payload.nextAppointment;\n      state.lastUpdated = new Date().toISOString();\n    }).addCase(fetchAppointments.rejected, function (state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n  }\n});\nvar _medicalCollaboration = medicalCollaborationSlice.actions,\n  addMessage = _medicalCollaboration.addMessage,\n  markMessageAsRead = _medicalCollaboration.markMessageAsRead,\n  markAllMessagesAsRead = _medicalCollaboration.markAllMessagesAsRead,\n  setActiveConversation = _medicalCollaboration.setActiveConversation,\n  addPendingReport = _medicalCollaboration.addPendingReport,\n  updateReportStatus = _medicalCollaboration.updateReportStatus,\n  addNotification = _medicalCollaboration.addNotification,\n  markNotificationAsRead = _medicalCollaboration.markNotificationAsRead,\n  addAlert = _medicalCollaboration.addAlert,\n  dismissAlert = _medicalCollaboration.dismissAlert,\n  updateSharingPreferences = _medicalCollaboration.updateSharingPreferences,\n  updateNotificationSettings = _medicalCollaboration.updateNotificationSettings,\n  setActiveTab = _medicalCollaboration.setActiveTab,\n  clearError = _medicalCollaboration.clearError,\n  setDummyData = _medicalCollaboration.setDummyData;\nexport { addMessage, markMessageAsRead, markAllMessagesAsRead, setActiveConversation, addPendingReport, updateReportStatus, addNotification, markNotificationAsRead, addAlert, dismissAlert, updateSharingPreferences, updateNotificationSettings, setActiveTab, clearError, setDummyData };\nexport default medicalCollaborationSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","medicalCollaborationAPI","fetchMedicalStaff","_ref3","_asyncToGenerator","_ref","_ref2","patientId","token","rejectWithValue","response","getMedicalStaff","error","_error$response","_error$response$data","data","_x","_x2","apply","arguments","sendReport","_ref6","_ref4","_ref5","reportData","_error$response2","_error$response2$data","_x3","_x4","fetchMessages","_ref9","_ref7","_ref8","limit","getMessages","_error$response3","_error$response3$data","_x5","_x6","sendMessage","_ref10","_ref0","_ref1","messageData","_error$response4","_error$response4$data","_x7","_x8","fetchAppointments","_ref13","_ref11","_ref12","getAppointments","_error$response5","_error$response5$data","_x9","_x0","initialState","medicalStaff","primaryDoctor","physiotherapist","nurses","specialists","messages","unreadCount","activeConversation","sharedReports","pendingReports","reportTemplates","appointments","nextAppointment","notifications","alerts","sharingPreferences","autoShareProgress","autoShareACLRSI","autoShareAIAnalysis","weeklyReportEnabled","emergencyContactEnabled","notificationSettings","newMessage","appointmentReminder","reportRequested","urgentAlert","weeklyDigest","isLoading","lastUpdated","activeTab","medicalCollaborationSlice","name","reducers","addMessage","state","action","message","_objectSpread","id","Date","now","toString","timestamp","toISOString","isRead","isSent","payload","unshift","length","slice","markMessageAsRead","messageId","find","m","Math","max","markAllMessagesAsRead","forEach","setActiveConversation","addPendingReport","report","createdAt","status","updateReportStatus","_action$payload","reportId","pendingIndex","findIndex","r","sentAt","splice","addNotification","notification","type","markNotificationAsRead","notificationId","n","addAlert","alert","isActive","dismissAlert","alertId","a","dismissedAt","updateSharingPreferences","updateNotificationSettings","setActiveTab","clearError","setDummyData","title","specialization","hospital","email","phone","avatar","isOnline","lastSeen","getTime","senderId","senderName","senderTitle","content","recipients","sessionsCompleted","totalExercises","averagePainLevel","averageBorgScale","noteableProgress","totalScore","emotionScore","confidenceScore","interpretation","recommendations","doctor","datetime","duration","location","notes","sender","appointment","extraReducers","builder","addCase","pending","fulfilled","rejected","_medicalCollaboration","actions","reducer"],"sources":["/Users/shota/Desktop/文献検索/acl-rehab-app/mobile/src/store/slices/medicalCollaborationSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { medicalCollaborationAPI } from '../../services/api';\n\n// 非同期アクション: 医療従事者リストの取得\nexport const fetchMedicalStaff = createAsyncThunk(\n  'medicalCollaboration/fetchMedicalStaff',\n  async ({ patientId, token }, { rejectWithValue }) => {\n    try {\n      const response = await medicalCollaborationAPI.getMedicalStaff(patientId, token);\n      return response;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.error || '医療従事者情報の取得に失敗しました');\n    }\n  }\n);\n\n// 非同期アクション: レポート送信\nexport const sendReport = createAsyncThunk(\n  'medicalCollaboration/sendReport',\n  async ({ reportData, token }, { rejectWithValue }) => {\n    try {\n      const response = await medicalCollaborationAPI.sendReport(reportData, token);\n      return response;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.error || 'レポート送信に失敗しました');\n    }\n  }\n);\n\n// 非同期アクション: メッセージ履歴の取得\nexport const fetchMessages = createAsyncThunk(\n  'medicalCollaboration/fetchMessages',\n  async ({ patientId, limit, token }, { rejectWithValue }) => {\n    try {\n      const response = await medicalCollaborationAPI.getMessages(patientId, limit, token);\n      return response;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.error || 'メッセージ履歴の取得に失敗しました');\n    }\n  }\n);\n\n// 非同期アクション: メッセージ送信\nexport const sendMessage = createAsyncThunk(\n  'medicalCollaboration/sendMessage',\n  async ({ messageData, token }, { rejectWithValue }) => {\n    try {\n      const response = await medicalCollaborationAPI.sendMessage(messageData, token);\n      return response;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.error || 'メッセージ送信に失敗しました');\n    }\n  }\n);\n\n// 非同期アクション: 予約の取得\nexport const fetchAppointments = createAsyncThunk(\n  'medicalCollaboration/fetchAppointments',\n  async ({ patientId, token }, { rejectWithValue }) => {\n    try {\n      const response = await medicalCollaborationAPI.getAppointments(patientId, token);\n      return response;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.error || '予約情報の取得に失敗しました');\n    }\n  }\n);\n\nconst initialState = {\n  // 医療従事者情報\n  medicalStaff: {\n    primaryDoctor: null,\n    physiotherapist: null,\n    nurses: [],\n    specialists: [],\n  },\n  \n  // メッセージ・コミュニケーション\n  messages: [],\n  unreadCount: 0,\n  activeConversation: null,\n  \n  // レポート・共有データ\n  sharedReports: [],\n  pendingReports: [],\n  reportTemplates: [],\n  \n  // 予約・スケジュール\n  appointments: [],\n  nextAppointment: null,\n  \n  // 通知・アラート\n  notifications: [],\n  alerts: [],\n  \n  // 設定\n  sharingPreferences: {\n    autoShareProgress: true,\n    autoShareACLRSI: true,\n    autoShareAIAnalysis: false,\n    weeklyReportEnabled: true,\n    emergencyContactEnabled: true,\n  },\n  \n  notificationSettings: {\n    newMessage: true,\n    appointmentReminder: true,\n    reportRequested: true,\n    urgentAlert: true,\n    weeklyDigest: false,\n  },\n  \n  // UI状態\n  isLoading: false,\n  error: null,\n  lastUpdated: null,\n  activeTab: 'team', // team, reports, settings\n};\n\nconst medicalCollaborationSlice = createSlice({\n  name: 'medicalCollaboration',\n  initialState,\n  reducers: {\n    // メッセージ関連\n    addMessage: (state, action) => {\n      const message = {\n        id: Date.now().toString(),\n        timestamp: new Date().toISOString(),\n        isRead: true,\n        isSent: true,\n        ...action.payload,\n      };\n      \n      state.messages.unshift(message);\n      \n      // 最新100件に制限\n      if (state.messages.length > 100) {\n        state.messages = state.messages.slice(0, 100);\n      }\n    },\n    \n    markMessageAsRead: (state, action) => {\n      const messageId = action.payload;\n      const message = state.messages.find(m => m.id === messageId);\n      if (message && !message.isRead) {\n        message.isRead = true;\n        state.unreadCount = Math.max(0, state.unreadCount - 1);\n      }\n    },\n    \n    markAllMessagesAsRead: (state) => {\n      state.messages.forEach(message => {\n        message.isRead = true;\n      });\n      state.unreadCount = 0;\n    },\n    \n    setActiveConversation: (state, action) => {\n      state.activeConversation = action.payload;\n    },\n    \n    // レポート関連\n    addPendingReport: (state, action) => {\n      const report = {\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString(),\n        status: 'pending',\n        ...action.payload,\n      };\n      \n      state.pendingReports.unshift(report);\n    },\n    \n    updateReportStatus: (state, action) => {\n      const { reportId, status } = action.payload;\n      \n      // pending reportsから検索\n      const pendingIndex = state.pendingReports.findIndex(r => r.id === reportId);\n      if (pendingIndex !== -1) {\n        if (status === 'sent') {\n          // pending から shared に移動\n          const report = state.pendingReports[pendingIndex];\n          report.status = 'sent';\n          report.sentAt = new Date().toISOString();\n          state.sharedReports.unshift(report);\n          state.pendingReports.splice(pendingIndex, 1);\n        } else {\n          state.pendingReports[pendingIndex].status = status;\n        }\n      }\n    },\n    \n    // 通知関連\n    addNotification: (state, action) => {\n      const notification = {\n        id: Date.now().toString(),\n        timestamp: new Date().toISOString(),\n        isRead: false,\n        ...action.payload,\n      };\n      \n      state.notifications.unshift(notification);\n      \n      // 通知タイプに応じてunreadCountを更新\n      if (notification.type === 'message') {\n        state.unreadCount += 1;\n      }\n      \n      // 最新50件に制限\n      if (state.notifications.length > 50) {\n        state.notifications = state.notifications.slice(0, 50);\n      }\n    },\n    \n    markNotificationAsRead: (state, action) => {\n      const notificationId = action.payload;\n      const notification = state.notifications.find(n => n.id === notificationId);\n      if (notification && !notification.isRead) {\n        notification.isRead = true;\n      }\n    },\n    \n    // アラート関連\n    addAlert: (state, action) => {\n      const alert = {\n        id: Date.now().toString(),\n        timestamp: new Date().toISOString(),\n        isActive: true,\n        ...action.payload,\n      };\n      \n      state.alerts.unshift(alert);\n      \n      // 最新10件に制限\n      if (state.alerts.length > 10) {\n        state.alerts = state.alerts.slice(0, 10);\n      }\n    },\n    \n    dismissAlert: (state, action) => {\n      const alertId = action.payload;\n      const alert = state.alerts.find(a => a.id === alertId);\n      if (alert) {\n        alert.isActive = false;\n        alert.dismissedAt = new Date().toISOString();\n      }\n    },\n    \n    // 設定関連\n    updateSharingPreferences: (state, action) => {\n      state.sharingPreferences = {\n        ...state.sharingPreferences,\n        ...action.payload,\n      };\n    },\n    \n    updateNotificationSettings: (state, action) => {\n      state.notificationSettings = {\n        ...state.notificationSettings,\n        ...action.payload,\n      };\n    },\n    \n    // UI状態\n    setActiveTab: (state, action) => {\n      state.activeTab = action.payload;\n    },\n    \n    clearError: (state) => {\n      state.error = null;\n    },\n    \n    // ダミーデータ設定（デモ用）\n    setDummyData: (state) => {\n      const now = new Date();\n      \n      // 医療従事者情報\n      state.medicalStaff = {\n        primaryDoctor: {\n          id: 'doc_001',\n          name: '田中 一郎',\n          title: '整形外科医',\n          specialization: 'スポーツ整形外科',\n          hospital: '東京スポーツ医療センター',\n          email: 'tanaka@sports-med.jp',\n          phone: '03-1234-5678',\n          avatar: null,\n          isOnline: true,\n          lastSeen: new Date().toISOString(),\n        },\n        physiotherapist: {\n          id: 'pt_001',\n          name: '佐藤 花子',\n          title: '理学療法士',\n          specialization: 'スポーツリハビリテーション',\n          hospital: '東京スポーツ医療センター',\n          email: 'sato@sports-med.jp',\n          phone: '03-1234-5679',\n          avatar: null,\n          isOnline: false,\n          lastSeen: new Date(now.getTime() - 30 * 60 * 1000).toISOString(),\n        },\n        nurses: [\n          {\n            id: 'nurse_001',\n            name: '山田 次郎',\n            title: '看護師',\n            specialization: 'リハビリテーション看護',\n            hospital: '東京スポーツ医療センター',\n            email: 'yamada@sports-med.jp',\n            avatar: null,\n            isOnline: true,\n          }\n        ],\n        specialists: [\n          {\n            id: 'spec_001',\n            name: '鈴木 三郎',\n            title: 'スポーツ心理学者',\n            specialization: '復帰支援カウンセリング',\n            hospital: '東京スポーツ医療センター',\n            email: 'suzuki@sports-med.jp',\n            avatar: null,\n            isOnline: false,\n          }\n        ],\n      };\n      \n      // メッセージ履歴\n      state.messages = [\n        {\n          id: '1',\n          senderId: 'pt_001',\n          senderName: '佐藤 花子',\n          senderTitle: '理学療法士',\n          content: 'お疲れ様です。今日のトレーニングはいかがでしたか？痛みの状況について教えてください。',\n          timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),\n          type: 'text',\n          isRead: false,\n          isSent: false,\n        },\n        {\n          id: '2',\n          senderId: 'patient',\n          senderName: '患者',\n          content: 'お疲れ様です。今日は調子が良く、痛みも2/10程度でした。ミニスクワットも10回×3セット完了できました。',\n          timestamp: new Date(now.getTime() - 90 * 60 * 1000).toISOString(),\n          type: 'text',\n          isRead: true,\n          isSent: true,\n        },\n        {\n          id: '3',\n          senderId: 'doc_001',\n          senderName: '田中 一郎',\n          senderTitle: '整形外科医',\n          content: '経過良好ですね。来週の診察で次のフェーズについて相談しましょう。ACL-RSIの結果も拝見しました。',\n          timestamp: new Date(now.getTime() - 24 * 60 * 60 * 1000).toISOString(),\n          type: 'text',\n          isRead: true,\n          isSent: false,\n        },\n      ];\n      \n      state.unreadCount = 1;\n      \n      // 共有レポート\n      state.sharedReports = [\n        {\n          id: 'report_001',\n          title: '週間進捗レポート',\n          type: 'weekly_progress',\n          createdAt: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n          sentAt: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000 + 60000).toISOString(),\n          status: 'sent',\n          recipients: ['doc_001', 'pt_001'],\n          data: {\n            sessionsCompleted: 5,\n            totalExercises: 42,\n            averagePainLevel: 2.1,\n            averageBorgScale: 11.8,\n            noteableProgress: 'ROM改善、筋力向上確認'\n          }\n        },\n        {\n          id: 'report_002',\n          title: 'ACL-RSI評価結果',\n          type: 'acl_rsi',\n          createdAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n          sentAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000 + 120000).toISOString(),\n          status: 'sent',\n          recipients: ['doc_001', 'spec_001'],\n          data: {\n            totalScore: 72,\n            emotionScore: 68,\n            confidenceScore: 75,\n            interpretation: '準備度が中程度',\n            recommendations: ['競技特異的トレーニング', '復帰計画の策定']\n          }\n        }\n      ];\n      \n      // 予約情報\n      state.appointments = [\n        {\n          id: 'apt_001',\n          title: '経過観察・診察',\n          doctor: state.medicalStaff.primaryDoctor,\n          datetime: new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n          duration: 30,\n          location: '東京スポーツ医療センター 3F 診察室A',\n          type: 'consultation',\n          status: 'confirmed',\n          notes: '次フェーズへの移行について相談',\n        },\n        {\n          id: 'apt_002',\n          title: 'リハビリテーション',\n          doctor: state.medicalStaff.physiotherapist,\n          datetime: new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n          duration: 60,\n          location: '東京スポーツ医療センター 2F リハビリ室',\n          type: 'physiotherapy',\n          status: 'confirmed',\n          notes: '機能評価とプログラム調整',\n        }\n      ];\n      \n      state.nextAppointment = state.appointments[0];\n      \n      // 通知\n      state.notifications = [\n        {\n          id: 'notif_001',\n          type: 'message',\n          title: '理学療法士からメッセージ',\n          content: '今日のトレーニングについて質問があります',\n          timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),\n          isRead: false,\n          sender: state.medicalStaff.physiotherapist,\n        },\n        {\n          id: 'notif_002',\n          type: 'appointment_reminder',\n          title: '診察予約のリマインダー',\n          content: '3日後の診察予約があります',\n          timestamp: new Date(now.getTime() - 6 * 60 * 60 * 1000).toISOString(),\n          isRead: true,\n          appointment: state.appointments[0],\n        },\n        {\n          id: 'notif_003',\n          type: 'report_shared',\n          title: 'レポートが共有されました',\n          content: 'ACL-RSI評価結果が医療従事者と共有されました',\n          timestamp: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n          isRead: true,\n          report: state.sharedReports[1],\n        }\n      ];\n      \n      state.lastUpdated = new Date().toISOString();\n    },\n  },\n  \n  extraReducers: (builder) => {\n    builder\n      // 医療従事者取得\n      .addCase(fetchMedicalStaff.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchMedicalStaff.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.medicalStaff = action.payload.medicalStaff;\n        state.lastUpdated = new Date().toISOString();\n      })\n      .addCase(fetchMedicalStaff.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      })\n      \n      // レポート送信\n      .addCase(sendReport.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(sendReport.fulfilled, (state, action) => {\n        state.isLoading = false;\n        // pending reportのステータスを更新\n        const reportId = action.payload.reportId;\n        const pendingIndex = state.pendingReports.findIndex(r => r.id === reportId);\n        if (pendingIndex !== -1) {\n          const report = state.pendingReports[pendingIndex];\n          report.status = 'sent';\n          report.sentAt = new Date().toISOString();\n          state.sharedReports.unshift(report);\n          state.pendingReports.splice(pendingIndex, 1);\n        }\n      })\n      .addCase(sendReport.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      })\n      \n      // メッセージ履歴取得\n      .addCase(fetchMessages.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchMessages.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.messages = action.payload.messages;\n        state.unreadCount = action.payload.unreadCount;\n        state.lastUpdated = new Date().toISOString();\n      })\n      .addCase(fetchMessages.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      })\n      \n      // メッセージ送信\n      .addCase(sendMessage.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(sendMessage.fulfilled, (state, action) => {\n        state.isLoading = false;\n        // 送信したメッセージを履歴に追加\n        const message = {\n          ...action.payload.message,\n          isSent: true,\n          isRead: true,\n        };\n        state.messages.unshift(message);\n      })\n      .addCase(sendMessage.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      })\n      \n      // 予約取得\n      .addCase(fetchAppointments.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchAppointments.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.appointments = action.payload.appointments;\n        state.nextAppointment = action.payload.nextAppointment;\n        state.lastUpdated = new Date().toISOString();\n      })\n      .addCase(fetchAppointments.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      });\n  },\n});\n\nexport const {\n  addMessage,\n  markMessageAsRead,\n  markAllMessagesAsRead,\n  setActiveConversation,\n  addPendingReport,\n  updateReportStatus,\n  addNotification,\n  markNotificationAsRead,\n  addAlert,\n  dismissAlert,\n  updateSharingPreferences,\n  updateNotificationSettings,\n  setActiveTab,\n  clearError,\n  setDummyData,\n} = medicalCollaborationSlice.actions;\n\nexport default medicalCollaborationSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}